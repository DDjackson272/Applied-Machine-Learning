getwd()
setwd("C:\\Users\\acdjackson\\Desktop\\CS498\\homework1")
data <- read.csv("pima-indians-diabetes.csv")
data
dim(data)
dim(data)
install.packages("caret")
library("caret")
install.packages("klaR")
head(data)
data
head(data)
library(caret)
colnames(data) <- c("a", "b", "c", "d", "e", "f", "g", "h", "i")
data
data
ind <- createDataPartition(data$i, times=1, p=0.8, list=F)
dataTrain <- data[ind,]
dataTest <- data[-ind,]
dataTrain
ind
library(klaR)
knb.model <- NaiveBayes(i~., data=dataTrain)
i
i~
1
dataTest
i~.
knb.model <- NaiveBayes(i~., data=dataTrain)
knb.model <- NaiveBayes(grouping=i~., data=dataTrain)
knb.model <- NaiveBayes(formula=i~., data=dataTrain)
install.packages(e1071)
install.packages("e1071")
library(e1071)
knb.model <- NaiveBayes(formula=i~., data=dataTrain)
nb.model <- naiveBayes(i~., data=dataTrain)
nb_predict <- predict(nb.model, newdata=dataTest)
nb.table <- table(actual=dataTest$i, predict=nb_predict)
nb_predict
ind <-createDataPartition(data, times=1, p=0.8, list=F)
ind <-createDataPartition(data$i, times=1, p=0.8, list=F)
ind
[ind,]
data[ind,]
length(data[ind,])
dataTrain <- data[ind,]
length(dataTrain)
width(dataTrain)
nb.model <- naiveBayes(i~., data=dataTrain)
nb
nb.model
dataTest$i
nb_predict
i~.
i
i~
1
levels(data$i)
levels(dataTrain$i)
nb.model <- naiveBayes(i~. data=dataTrain)
nb.model <- naiveBayes(i~., data=dataTrain)
class(nb.model)
pred <- predict(nb.model, dataTest)
table(pred)
pred
head(data)
model <- naiveBayes(i~., data=data)
model
predict(model, dataTest)
predict(model, dataTest, type="raw")
model <- naiveBayes(i~., data=dataTrain)
mode
pred <- predic(model, newdata=dataTest, type="raw")
pred <- predict(model, newdata=dataTest, type="raw")
tabl <- table(actual=dataTest$i, predict=pred)
pred
dataTest
View(pred)
pred[1]
pred[1][1]
pred[2][1]
actual = dataTest$i
View(pred)
View(pred)
len(pred)
length(pred)
length(actual)
predict=[]
pred <- predict(model, newdata=dataTest)
pred
pred <- predict(model, newdata=dataTest, type="class")
pred
pred <- predict(model, newdata=dataTest, type="raw")
pred
pred <- predict(model, newdata=dataTest, type="class", threshold=0.00001)
pred
pred <- predict(model, newdata=dataTest, type="raw")
for item in pred:
for (i in 1:length(actual)):
for (i in 1:length(actual)){}
for (i in 1:length(actual)){}
for (i in 1:length(actual)){if (pred[i][2]>pred[i][1]){pred[i]=1}else{pred[i]=0}}
pred
pred[1][1]
pred[1][1]>0
if(pred[1][1])>0{print("Done")}
if(pred[1][1]>0){print("Done")}
if(pred[1][1]>0) pred[1] = 1
pred
after
pred <- predict(model, newdata=dataTest)
pred
View(nb.model)
View(nb.model)
detach("package:e1071", unload=TRUE)
library("e1071", lib.loc="~/R/win-library/3.5")
library("klaR", lib.loc="~/R/win-library/3.5")
data
knb_model <- NaiveBayes(i ~ ., data=dataTrain)
knb_model <- NaiveBaye(dataTrain$i, data=dataTrain)
knb_model <- NaiveBayes(dataTrain$i, data=dataTrain)
knb_model <- NaiveBayes(grouping=dataTrain$i, data=dataTrain)
data(dataTrain)
dataTrain
data("iris")
m <- NaiveBayes(Species~., data=iris)
iris
