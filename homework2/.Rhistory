colnames(image_res_data) <- sprintf("pixel%d", 1:400)
image_res_data <- read.table("test_stretched2.csv", sep=",")
colnames(image_res_data) <- sprintf("pixel%d", 1:400)
image_model <- naiveBayes(Number~., data=image_train_data)
image_pred <- predict(image_model, newdata=image_res_data)
image_pred
write.csv(image_pred, file="hengzhe2_2.csv")
library(e1071)
library(sparklyr)
library(dplyr)
Sys.setenv(
SPARK_HOME="C:\\spark\\spark-2.3.1-bin-hadoop2.7"
)
sc <- spark_connect(master = "local")
# Take in data
image_train_data <- read.table("train.csv", sep = ',')
# Rename column of data frame
colnames(image_train_data)[1] <- "Number"
# colnames(image_test_data)[1] <- "Number"
colnames(image_train_data)[2:785] <- sprintf("pixel%d", 1:784)
# colnames(image_test_data)[2:785] <- sprintf("pixel%d", 1:784)
image_train_data$Number <- as.factor(image_train_data$Number)
# Set a threshold (127)
image_train_data[image_train_data <= 127] <- 0
image_train_data[image_train_data >= 128] <- 1
# image_test_data[image_test_data <= 127] <- 0
image_test_data[image_test_data >= 128] <- 1
# Resizing function that resize and strech the image
resizingFunc <- function(inputdata){
print("Start truncating vector!")
# Resizing from 28*28 to 20*20
col_to_delete <- vector()
count <- 1
for (i in 2:length(inputdata[1,])){
row <- floor((i-2)/28)
col <- (i-2) %% 28
if ((row <= 3 || row >= 24) || (col <= 3 || col >= 24)){
col_to_delete[count] <- i
count <- count + 1
}
}
boundingData <- inputdata[-col_to_delete]
colnames(boundingData) <- c(0:400)
colnames(boundingData)[1] <- "Number"
print("Start stretching vector!")
# Stretch the image
max_col <- 1
min_col <- 20
max_row <- 1
min_row <- 20
for (k in 1:nrow(boundingData)){
print(k)
image_1 <- boundingData[k,][2:401]
max_col <- 1
min_col <- 20
max_row <- 1
min_row <- 20
for (i in 1:20){
for (j in 1:20){
if(image_1[[(i-1)*20+j]] == 1){
if (i < min_row)
min_row <- i
if (i > max_row)
max_row <- i
if (j < min_col)
min_col <- j
if (j > max_col)
max_col <- j
}
}
}
row_a <- 20/(max_row-min_row)
row_b <- 20*min_row/(min_row-max_row)
col_a <- 20/(max_col-min_col)
col_b <- 20*min_col/(min_col-max_col)
for (i in 1:20){
for (j in 1:20){
if(image_1[[(i-1)*20+j]] == 1){
end_y <- round(col_a*j+col_b)
if (end_y < 1 || end_y > 20)
end_y <- j
image_1[[(i-1)*20+end_y]] <- 1
end_x <- round(row_a*i+row_b)
if (end_x < 1 || end_x > 20)
end_x <- i
image_1[[(end_x-1)*20+j]] <- 1
}
}
}
boundingData[k,][2:401] <- image_1
}
return(boundingData)
}
image_res_data <- read.table("test.csv", sep=",")
colnames(image_res_data) <- sprintf("pixel%d", 1:784)
image_res_data[image_res_data <= 127] <- 0
image_res_data[image_res_data >= 128] <- 1
image_train_tbl <- copy_to(sc, image_train_data[1:30000,])
image_res_tbl <- copy_to(sc, image_res_data)
image_ber_model <- image_train_tbl %>%
ml_naive_bayes(Number~., model_type="bernoulli")
image_ber_pred <- predict(image_ber_model, newdata=image_res_tbl)
image_ber_pred[1:6]
write.csv(image_ber_pred, file="hengzhe2_3.csv")
image_train_data <- read.table("train_stretched_noheader.csv", sep=",")
colnames(image_train_data)[1] <- "Number"
colnames(image_train_data)[2:401] <- sprintf("pixel%d", 1:400)
image_train_data$Number <- as.factor(image_train_data$Number)
image_res_data <- read.table("test_stretched2.csv", sep=",")
colnames(image_res_data) <- sprintf("pixel%d", 1:400)
image_train_tbl <- copy_to(sc, image_train_data[1:30000,], overwrite = TRUE)
library(e1071)
library(sparklyr)
library(dplyr)
Sys.setenv(
SPARK_HOME="C:\\spark\\spark-2.3.1-bin-hadoop2.7"
)
sc <- spark_connect(master = "local")
image_train_data <- read.table("train_stretched_noheader.csv", sep=",")
colnames(image_train_data)[1] <- "Number"
colnames(image_train_data)[2:401] <- sprintf("pixel%d", 1:400)
image_train_data$Number <- as.factor(image_train_data$Number)
image_res_data <- read.table("test_stretched2.csv", sep=",")
colnames(image_res_data) <- sprintf("pixel%d", 1:400)
image_train_tbl <- copy_to(sc, image_train_data[1:30000,], overwrite = TRUE)
image_res_tbl <- copy_to(sc, image_res_data, overwrite = TRUE)
image_ber_model <- image_train_tbl %>%
ml_naive_bayes(Number~., model_type="bernoulli")
image_ber_pred <- predict(image_ber_model, newdata=image_res_tbl)
image_ber_pred[1,6]
image_ber_pred[1:6]
write.csv(image_ber_pred, file="hengzhe2_4.csv")
source('C:/Users/acdjackson/Desktop/CS498/homework1/part1A.R')
source('C:/Users/acdjackson/Desktop/CS498/homework1/part1B.R')
source('C:/Users/acdjackson/Desktop/CS498/homework1/part1D.R')
View(image_ber_model)
demo <- read.table("train_noheader.csv")
demo <- read.table("train_noheader.csv", sep=",")
View(demo)
demo <- read.table("test.csv", sep=",")
demo[demo >= 128] <- 1
demo[demp <= 127] <- 0
demo[dem0 <= 127] <- 0
demo[demo <= 127] <- 0
write.csv(demo, "test_after.csv")
write.csv(demo, "test_after.csv")
i = 1
i
demo[i,]
demo[i,][i]
demo[i,][i]<-1
demo[i,][i]
mat <- matrix(integer(), nrow=10, ncol=5)
mat
mat <- matrix(0, nrow=10, ncol=5)
mat
cal_class_distribution <- function(inputData){
res <- matrix(0, nrow = 10, ncol = length(inputData[1,]))
for (i in 1:nrow(inputData)){
print(i)
for (j in 2:length(inputData[1,])){
res[inputData$Number,][j-1] <- res[inputData$Number,][j-1] + 1
}
}
return (res)
}
g_u <- read.table("g_u.csv", sep=",")
mat_gu <- cal_class_distribution(g_u)
View(mat_gu)
cal_class_distribution <- function(inputData){
res <- matrix(0, nrow = 10, ncol = length(inputData[1,]))
for (i in 1:4){
print(i)
for (j in 2:length(inputData[1,])){
print(inputData$Number)
res[inputData$Number,][j-1] <- res[inputData$Number,][j-1] + 1
}
}
return (res)
}
g_u <- read.table("g_u.csv", sep=",")
mat_gu <- cal_class_distribution(g_u)
colnames(g_u)[1] = "Number"
mat_gu <- cal_class_distribution(g_u)
source('C:/Users/acdjackson/Desktop/CS498/homework1/cal_class_distribution.R')
View(mat_gu)
g_u[1,]$Number
is.integer(g_u[1,]$Number)
mat[g_u[1,]$Number,]
mat[g_u[1,]$Number,][1]
for (j in 2:10){
res[inputData$Number,][j-1] <- res[inputData$Number,][j-1] + 1
}
colnames(g_u)[1] = "Number"
mat_gu <- cal_class_distribution(g_u)
View(g_u)
colnames(g_u)[1] = "Number"
mat_gu <- cal_class_distribution(g_u)
g_u <- read.table("g_u.csv", sep=",")
View(g_u)
colnames(g_u)[1] = "Number"
mat_gu <- cal_class_distribution(g_u)
cal_class_distribution <- function(inputData){
res <- matrix(0, nrow = 10, ncol = length(inputData[1,]))
for (i in 1:4){
print(i)
for (j in 2:10){
print(inputData$Number)
res[inputData$Number,][j-1] <- res[inputData$Number,][j-1] + 1
}
}
return (res)
}
mat_gu <- cal_class_distribution(g_u)
View(mat_gu)
source('C:/Users/acdjackson/Desktop/CS498/homework1/cal_class_distribution.R')
View(mat_gu)
mat <- matrix(vector(), nrow=10)
mat
source('C:/Users/acdjackson/Desktop/CS498/homework1/cal_class_distribution.R')
mat[10]
mat[10,]
mat[10] <- c(mat[10],1)
mat[10,] <- c(mat[10,],1)
is.vector(mat[1])
mat[1] <- c(mat[1], 1)
res <- vector(10)
res <- vector(length=10)
res
res <- vector(vector(length=10))
res <- matrix(vector(), ncol=10)
res
res[1]
res[,1]
is.vector(res[,1])
is.vector(res[1])
b <- 1
b <- c(b,2)
b
b <- c(NA, 1)
b
append(b, 1)
b
res
append(res, 1)
res
append(res[1], 1)
res[1] <- append(res[1],1)
res <- matrix(-1, nrow=10)
res
res[1] <- append(res[1], 1)
res[1] <- append(res[1], 1)
count[1:10]
count <- vector(length=10)
count <- 0
count
count <- vector(length=10)
count[1:10] <- 0
count
colnames(g_u)[1] = "Number"
mat_gu <- cal_class_distribution(g_u)
mat_gu <- cal_class_distribution(g_u)
mat_gu <- cal_class_distribution(g_u)
g_u
head(g_u)
View(mat_gu)
View(g_u)
demo <- read.table("test.csv", sep=",")
demo[demo <= 127] <- 0
demo[demo >= 128] <- 1
head(demo)[1:40]
View(demo)
write.csv(demo, file="test_after")
write.csv(demo, file="test_after.csv")
g_u <- read.table("g_u.csv", sep=",")
head(demo)[1:40]
View(g_u)
colnames(g_u)[1] = "Number"
mat_gu <- cal_class_distribution(g_u)
res <- matrix(vector(), nrow=10)
count <- vector(length=10)
count[1:10] <- 1
print(count)
for (i in 1:20){
print(g_u[i,]$Number)
print(count[g_u[i,]$Number])
matrix[[g_u[i,]$Number,count[g_u[i,]$Number]]] <- i
count[g_u[i,]$Number] <- count[g_u[i,]$Number] + 1
}
RES
res
res[1[]]
res[1
]
res
res[1] <- 1
res
res <- matrix(vector(), nrow=10)
res[1,] < c(1)
res
g_u
g_u[gu$Number == 1]
g_u[g_u$Number == 1]
g_u[Number == 1]
g_u$Number == 1
g_u[g_u$Number == 1]
g_u[g_u == 1]
g_u[g_u[,"Number"]==1,]
temp <- g_u[g_u[,"Number"]==1,]
sum(temp[,2])
sum(temp[,656])
res <- matrix(integer(), nrow=10, ncol=length(g_u))
for (i in 0:9){
mat_set <- g_u[g_u[,"Number"]==i]
for (j in 2:length(g_u)){
res[i,][j] <- sum(mat_set[,j])
}
}
res <- matrix(integer(), nrow=10, ncol=length(g_u))
for (i in 0:9){
mat_set <- g_u[g_u[,"Number"]==i,]
for (j in 2:length(g_u)){
res[i,][j] <- sum(mat_set[,j])
}
}
res <- matrix(0, nrow=10, ncol=length(g_u))
for (i in 0:9){
mat_set <- g_u[g_u[,"Number"]==i,]
for (j in 2:length(g_u)){
res[i,][j] <- sum(mat_set[,j])
}
}
View(res)
View(res)
res <- matrix(0, nrow=10, ncol=length(g_u))
for (i in 0:9){
mat_set <- g_u[g_u[,"Number"]==i,]
for (j in 2:length(g_u)){
res[i,][j] <- round(sum(mat_set[,j])/nrow(mat_set))
}
}
View(res)
res <- matrix(0, nrow=10, ncol=length(g_u))
for (i in 0:9){
mat_set <- g_u[g_u[,"Number"]==i,]
for (j in 2:length(g_u)){
res[i+1,][j] <- round(sum(mat_set[,j])/nrow(mat_set))
}
}
View(res)
res <- matrix(0, nrow=10, ncol=length(g_u)-1)
for (i in 0:9){
mat_set <- g_u[g_u[,"Number"]==i,]
for (j in 2:length(g_u)){
res[i+1,][j-1] <- round(sum(mat_set[,j])/nrow(mat_set))
}
}
im_vec <- vector()
for (i in 1:10){
mat <- matrix(res[i,], nrow=28)
Mat <- Matrix(mat)
}
im_vec <- vector()
for (i in 1:10){
mat <- matrix(res[i,], nrow=28)
Mat <- Matrix(mat)
}
library(Matrix)
im_vec <- vector()
for (i in 1:10){
mat <- matrix(res[i,], nrow=28)
Mat <- Matrix(mat)
}
im_vec <- vector()
for (i in 1:10){
mat <- matrix(res[i,], nrow=28)
Mat <- Matrix(mat)
im_vec[i] <- image(Mat)
}
for (i in 0:9){
mat_set <- g_u[g_u[,"Number"]==i,]
for (j in 2:length(g_u)){
res[i+1,][j-1] <- round(sum(mat_set[,j])/nrow(mat_set))
}
}
im
for (i in 1:10){
mat <- matrix(res[i,], nrow=28)
Mat <- Matrix(mat)
im <- image(Mat)
print(im)
}
source('C:/Users/acdjackson/Desktop/CS498/homework1/cal_class_distribution.R')
source('C:/Users/acdjackson/Desktop/CS498/homework1/cal_class_distribution.R')
source('C:/Users/acdjackson/Desktop/CS498/homework1/cal_class_distribution.R')
View(mat_set)
source('C:/Users/acdjackson/Desktop/CS498/homework1/cal_class_distribution.R')
source('C:/Users/acdjackson/Desktop/CS498/homework1/cal_class_distribution.R')
source('C:/Users/acdjackson/Desktop/CS498/homework1/cal_class_distribution.R')
source('C:/Users/acdjackson/Desktop/CS498/homework1/cal_class_distribution.R')
source('C:/Users/acdjackson/Desktop/CS498/homework1/cal_class_distribution.R')
source('C:/Users/acdjackson/Desktop/CS498/homework1/part1A.R')
source('C:/Users/acdjackson/Desktop/CS498/homework1/part1A.R')
library(randomForest)
# take in data from csv
image_train_data_untouched <- read.table("train_noheader.csv", sep = ',')
colnames(image_train_data_untouched)[1] <- "Number"
colnames(image_train_data_untouched)[2:785] <- sprintf("pixel%d", 1:784)
image_train_data_untouched$Number <- as.factor(image_train_data_untouched$Number)
image_train_data_untouched[image_train_data_untouched <= 127] <- 0
image_train_data_untouched[image_train_data_untouched >= 128] <- 1
image_res_data_untouched <- read.table("test.csv", sep=",")
colnames(image_res_data_untouched) <- sprintf("pixel%d", 1:784)
image_res_data_untouched[image_res_data_untouched <= 127] <- 0
image_res_data_untouched[image_res_data_untouched >= 128] <- 1
# generate random forest
model_rf_untouched <- randomForest(Number~., data=image_train_data_untouched, maxnodes=2**16-1, ntree=30)
untouched_pred <- predict(model_rf_untouched, newdata=image_res_data_untouched)
untouched_pred
write.csv(untouched_pred, file="try.csv")
source('C:/Users/acdjackson/Desktop/CS498/homework1/part2B.R')
source('C:/Users/acdjackson/Desktop/CS498/homework1/cal_class_distribution.R')
source('C:/Users/acdjackson/Desktop/CS498/homework1/cal_class_distribution.R')
source('C:/Users/acdjackson/Desktop/CS498/homework1/cal_class_distribution.R')
source('C:/Users/acdjackson/Desktop/CS498/homework1/cal_class_distribution.R')
source('C:/Users/acdjackson/Desktop/CS498/homework1/cal_class_distribution.R')
source('C:/Users/acdjackson/Desktop/CS498/homework1/cal_class_distribution.R')
a*r[1:14]
a <- c(1,3)
b <- c(2,4)
a*b
sum(a*b)
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2.R')
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2.R')
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2.R')
a
a < c(1,2,3,4,5)
a <- c(1,2,3,4,5)
a
a*2 - c(1,2,3,4,5)
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2.R')
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2.R')
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2.R')
pred
as.factor(pred)
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2.R')
a
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2b.R')
pred_test
test_data
a
a*test_data[i,][1:14]
sum(a*test_data[i,][1:14])+b
pred_test = c()
for (i in nrow(test_data)){
if (sum(a*test_data[i,][1:14])+b > 0)
pred_test[k] <- 1
else
pred_test[k] <- -1
}
pred_test
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2b.R')
pred_test
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2b.R')
pred_test
as.factor(pred_test)
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2.R')
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2.R')
nrow(test_data)
predd <- 1:4884
write.csv(predd, file="res.csv")
predd <- c()
for (i in 1:4884){}
for (i in 1:4884){predd[i] <- 1}
predd
write.csv(predd, file="res.csv")
predd[predd==1] <- "<=50K"
predd
write.csv(predd, file="res.csv")
a
b
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2b.R')
levels(pred_test)
levels(as.factor(pred_test))
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2b.R')
write.csv(pred_test, file="res.csv")
levels(as.factor(pred_test))
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2.R')
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2b.R')
write.csv(pred_test, file="res.csv")
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2.R')
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2.R')
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2.R')
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2.R')
View(train_part)
View(train_part)
var(train_part$V1)
var(train_part$V2)
var(train_part$V3)
var(train_part$V4)
var(train_part$V5)
var(train_part$V6)
var(train_part$V7)
var(train_part$V8)
var(train_part$V9)
var(train_part$V10)
var(train_part$V11)
var(train_part$V12)
var(train_part$V13)
var(train_part$V14)
var(train_part$V15)
source('C:/Users/acdjackson/Desktop/CS498/homework2/hw2.R')
